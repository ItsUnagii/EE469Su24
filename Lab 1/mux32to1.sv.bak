module mux2to1(data, sel, out);

	input  logic [1:0] data;
	input  logic sel;
	output logic out;
	
	logic selBar;
	logic andStore [1:0]; 
	
	// out = (data[1] & sel) | (data[0] & ~sel);
	not not0 (selBar, sel);
	and and0 (andStore[0], data[1], sel);
	and and1 (andStore[1], data[0], selBar);
	or  or0  (out, andStore[0], andStore[1]);
	
endmodule


module mux4to1(data, sel, out);

	input  logic [3:0] data;
	input  logic [1:0] sel;
	output logic out;
	
	logic muxOut[1:0];
	
	mux2to1 mux0 (.data(data[1:0]),   .sel(sel[0]), .out(muxOut[0]));
	mux2to1 mux1 (.data(data[3:2]),   .sel(sel[0]), .out(muxOut[1]));
	mux2to1 mux2 (.data(muxOut[1:0]), .sel(sel[1]), .out(out));

endmodule


module mux8to1(data, sel, out);
	
	input  logic [7:0] data;
	input  logic [2:0] sel;
	output logic out;
	
	logic muxOut[1:0];
	
	mux4to1 mux0 (.data(data[3:0]),   .sel(sel[1:0]), .out(muxOut[0]));
	mux4to1 mux1 (.data(data[7:4]),   .sel(sel[1:0]), .out(muxOut[1]));
	mux2to1 mux2 (.data(muxOut[1:0]), .sel(sel[2]), .out(out));

endmodule


module mux16to1(data, sel, out);

	input  logic [15:0] data;
	input  logic [3:0] sel;
	output logic out;
	
	logic muxOut[1:0];
	
	mux8to1 mux0 (.data(data[7:0]),   .sel(sel[2:0]), .out(muxOut[0]));
	mux8to1 mux1 (.data(data[15:8]),  .sel(sel[2:0]), .out(muxOut[1]));
	mux2to1 mux2 (.data(muxOut[1:0]), .sel(sel[3]),   .out(out));

endmodule


module mux32to1(data, sel, out);

	input  logic [31:0] data;
	input  logic [4:0] sel;
	output logic out;
	
	logic muxOut[1:0];
	
	mux16to1 mux0 (.data(data[15:0]),  .sel(sel[3:0]), .out(muxOut[0]));
	mux16to1 mux1 (.data(data[31:16]), .sel(sel[3:0]), .out(muxOut[1]));
	mux2to1 mux2 (.data(muxOut[1:0]),  .sel(sel[4]),   .out(out));

endmodule
