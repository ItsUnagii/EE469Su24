Analysis & Synthesis report for DE1_SoC
Fri Jul 05 13:35:35 2024
Quartus Prime Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. Analysis & Synthesis Summary
  3. Analysis & Synthesis Settings
  4. Parallel Compilation
  5. Analysis & Synthesis Source Files Read
  6. Analysis & Synthesis Resource Usage Summary
  7. Analysis & Synthesis Resource Utilization by Entity
  8. General Register Statistics
  9. Multiplexer Restructuring Statistics (Restructuring Performed)
 10. Post-Synthesis Netlist Statistics for Top Partition
 11. Elapsed Time Per Partition
 12. Analysis & Synthesis Messages
 13. Analysis & Synthesis Suppressed Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.



+-------------------------------------------------------------------------------+
; Analysis & Synthesis Summary                                                  ;
+---------------------------------+---------------------------------------------+
; Analysis & Synthesis Status     ; Successful - Fri Jul 05 13:35:35 2024       ;
; Quartus Prime Version           ; 17.0.0 Build 595 04/25/2017 SJ Lite Edition ;
; Revision Name                   ; DE1_SoC                                     ;
; Top-level Entity Name           ; alu                                         ;
; Family                          ; Cyclone V                                   ;
; Logic utilization (in ALMs)     ; N/A                                         ;
; Total registers                 ; 0                                           ;
; Total pins                      ; 199                                         ;
; Total virtual pins              ; 0                                           ;
; Total block memory bits         ; 0                                           ;
; Total DSP Blocks                ; 0                                           ;
; Total HSSI RX PCSs              ; 0                                           ;
; Total HSSI PMA RX Deserializers ; 0                                           ;
; Total HSSI TX PCSs              ; 0                                           ;
; Total HSSI PMA TX Serializers   ; 0                                           ;
; Total PLLs                      ; 0                                           ;
; Total DLLs                      ; 0                                           ;
+---------------------------------+---------------------------------------------+


+---------------------------------------------------------------------------------------------------------------------------+
; Analysis & Synthesis Settings                                                                                             ;
+---------------------------------------------------------------------------------+--------------------+--------------------+
; Option                                                                          ; Setting            ; Default Value      ;
+---------------------------------------------------------------------------------+--------------------+--------------------+
; Device                                                                          ; 5CSEMA5F31C6       ;                    ;
; Top-level entity name                                                           ; alu                ; DE1_SoC            ;
; Family name                                                                     ; Cyclone V          ; Cyclone V          ;
; State Machine Processing                                                        ; User-Encoded       ; Auto               ;
; Use smart compilation                                                           ; Off                ; Off                ;
; Enable parallel Assembler and TimeQuest Timing Analyzer during compilation      ; On                 ; On                 ;
; Enable compact report table                                                     ; Off                ; Off                ;
; Restructure Multiplexers                                                        ; Auto               ; Auto               ;
; MLAB Add Timing Constraints For Mixed-Port Feed-Through Mode Setting Don't Care ; Off                ; Off                ;
; Create Debugging Nodes for IP Cores                                             ; Off                ; Off                ;
; Preserve fewer node names                                                       ; On                 ; On                 ;
; OpenCore Plus hardware evaluation                                               ; Enable             ; Enable             ;
; Verilog Version                                                                 ; Verilog_2001       ; Verilog_2001       ;
; VHDL Version                                                                    ; VHDL_1993          ; VHDL_1993          ;
; Safe State Machine                                                              ; Off                ; Off                ;
; Extract Verilog State Machines                                                  ; On                 ; On                 ;
; Extract VHDL State Machines                                                     ; On                 ; On                 ;
; Ignore Verilog initial constructs                                               ; Off                ; Off                ;
; Iteration limit for constant Verilog loops                                      ; 5000               ; 5000               ;
; Iteration limit for non-constant Verilog loops                                  ; 250                ; 250                ;
; Add Pass-Through Logic to Inferred RAMs                                         ; On                 ; On                 ;
; Infer RAMs from Raw Logic                                                       ; On                 ; On                 ;
; Parallel Synthesis                                                              ; On                 ; On                 ;
; DSP Block Balancing                                                             ; Auto               ; Auto               ;
; NOT Gate Push-Back                                                              ; On                 ; On                 ;
; Power-Up Don't Care                                                             ; On                 ; On                 ;
; Remove Redundant Logic Cells                                                    ; Off                ; Off                ;
; Remove Duplicate Registers                                                      ; On                 ; On                 ;
; Ignore CARRY Buffers                                                            ; Off                ; Off                ;
; Ignore CASCADE Buffers                                                          ; Off                ; Off                ;
; Ignore GLOBAL Buffers                                                           ; Off                ; Off                ;
; Ignore ROW GLOBAL Buffers                                                       ; Off                ; Off                ;
; Ignore LCELL Buffers                                                            ; Off                ; Off                ;
; Ignore SOFT Buffers                                                             ; On                 ; On                 ;
; Limit AHDL Integers to 32 Bits                                                  ; Off                ; Off                ;
; Optimization Technique                                                          ; Balanced           ; Balanced           ;
; Carry Chain Length                                                              ; 70                 ; 70                 ;
; Auto Carry Chains                                                               ; On                 ; On                 ;
; Auto Open-Drain Pins                                                            ; On                 ; On                 ;
; Perform WYSIWYG Primitive Resynthesis                                           ; Off                ; Off                ;
; Auto ROM Replacement                                                            ; On                 ; On                 ;
; Auto RAM Replacement                                                            ; On                 ; On                 ;
; Auto DSP Block Replacement                                                      ; On                 ; On                 ;
; Auto Shift Register Replacement                                                 ; Auto               ; Auto               ;
; Allow Shift Register Merging across Hierarchies                                 ; Auto               ; Auto               ;
; Auto Clock Enable Replacement                                                   ; On                 ; On                 ;
; Strict RAM Replacement                                                          ; Off                ; Off                ;
; Allow Synchronous Control Signals                                               ; On                 ; On                 ;
; Force Use of Synchronous Clear Signals                                          ; Off                ; Off                ;
; Auto Resource Sharing                                                           ; Off                ; Off                ;
; Allow Any RAM Size For Recognition                                              ; Off                ; Off                ;
; Allow Any ROM Size For Recognition                                              ; Off                ; Off                ;
; Allow Any Shift Register Size For Recognition                                   ; Off                ; Off                ;
; Use LogicLock Constraints during Resource Balancing                             ; On                 ; On                 ;
; Ignore translate_off and synthesis_off directives                               ; Off                ; Off                ;
; Timing-Driven Synthesis                                                         ; On                 ; On                 ;
; Report Parameter Settings                                                       ; On                 ; On                 ;
; Report Source Assignments                                                       ; On                 ; On                 ;
; Report Connectivity Checks                                                      ; On                 ; On                 ;
; Ignore Maximum Fan-Out Assignments                                              ; Off                ; Off                ;
; Synchronization Register Chain Length                                           ; 3                  ; 3                  ;
; PowerPlay Power Optimization During Synthesis                                   ; Normal compilation ; Normal compilation ;
; HDL message level                                                               ; Level2             ; Level2             ;
; Suppress Register Optimization Related Messages                                 ; Off                ; Off                ;
; Number of Removed Registers Reported in Synthesis Report                        ; 5000               ; 5000               ;
; Number of Swept Nodes Reported in Synthesis Report                              ; 5000               ; 5000               ;
; Number of Inverted Registers Reported in Synthesis Report                       ; 100                ; 100                ;
; Clock MUX Protection                                                            ; On                 ; On                 ;
; Auto Gated Clock Conversion                                                     ; Off                ; Off                ;
; Block Design Naming                                                             ; Auto               ; Auto               ;
; SDC constraint protection                                                       ; Off                ; Off                ;
; Synthesis Effort                                                                ; Auto               ; Auto               ;
; Shift Register Replacement - Allow Asynchronous Clear Signal                    ; On                 ; On                 ;
; Pre-Mapping Resynthesis Optimization                                            ; Off                ; Off                ;
; Analysis & Synthesis Message Level                                              ; Medium             ; Medium             ;
; Disable Register Merging Across Hierarchies                                     ; Auto               ; Auto               ;
; Resource Aware Inference For Block RAM                                          ; On                 ; On                 ;
; Automatic Parallel Synthesis                                                    ; On                 ; On                 ;
; Partial Reconfiguration Bitstream ID                                            ; Off                ; Off                ;
+---------------------------------------------------------------------------------+--------------------+--------------------+


+------------------------------------------+
; Parallel Compilation                     ;
+----------------------------+-------------+
; Processors                 ; Number      ;
+----------------------------+-------------+
; Number detected on machine ; 8           ;
; Maximum allowed            ; 4           ;
;                            ;             ;
; Average used               ; 1.00        ;
; Maximum used               ; 1           ;
;                            ;             ;
; Usage by Processor         ; % Time Used ;
;     Processor 1            ; 100.0%      ;
+----------------------------+-------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Analysis & Synthesis Source Files Read                                                                                                                                                         ;
+----------------------------------+-----------------+------------------------------+--------------------------------------------------------------------------------------------------+---------+
; File Name with User-Entered Path ; Used in Netlist ; File Type                    ; File Name with Absolute Path                                                                     ; Library ;
+----------------------------------+-----------------+------------------------------+--------------------------------------------------------------------------------------------------+---------+
; alu.sv                           ; yes             ; User SystemVerilog HDL File  ; C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu.sv      ;         ;
; adding.sv                        ; yes             ; User SystemVerilog HDL File  ; C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/adding.sv   ;         ;
; alu_1bit.sv                      ; yes             ; User SystemVerilog HDL File  ; C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv ;         ;
; muxes.sv                         ; yes             ; User SystemVerilog HDL File  ; C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/muxes.sv    ;         ;
+----------------------------------+-----------------+------------------------------+--------------------------------------------------------------------------------------------------+---------+


+--------------------------------------------------------------+
; Analysis & Synthesis Resource Usage Summary                  ;
+---------------------------------------------+----------------+
; Resource                                    ; Usage          ;
+---------------------------------------------+----------------+
; Estimate of Logic utilization (ALMs needed) ; 166            ;
;                                             ;                ;
; Combinational ALUT usage for logic          ; 242            ;
;     -- 7 input functions                    ; 0              ;
;     -- 6 input functions                    ; 89             ;
;     -- 5 input functions                    ; 25             ;
;     -- 4 input functions                    ; 17             ;
;     -- <=3 input functions                  ; 111            ;
;                                             ;                ;
; Dedicated logic registers                   ; 0              ;
;                                             ;                ;
; I/O pins                                    ; 199            ;
;                                             ;                ;
; Total DSP Blocks                            ; 0              ;
;                                             ;                ;
; Maximum fan-out node                        ; cntrl[0]~input ;
; Maximum fan-out                             ; 138            ;
; Total fan-out                               ; 1253           ;
; Average fan-out                             ; 1.96           ;
+---------------------------------------------+----------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Analysis & Synthesis Resource Utilization by Entity                                                                                                                                                                            ;
+------------------------------+---------------------+---------------------------+-------------------+------------+------+--------------+-----------------------------------------------------------+-------------+--------------+
; Compilation Hierarchy Node   ; Combinational ALUTs ; Dedicated Logic Registers ; Block Memory Bits ; DSP Blocks ; Pins ; Virtual Pins ; Full Hierarchy Name                                       ; Entity Name ; Library Name ;
+------------------------------+---------------------+---------------------------+-------------------+------------+------+--------------+-----------------------------------------------------------+-------------+--------------+
; |alu                         ; 242 (19)            ; 0 (0)                     ; 0                 ; 0          ; 199  ; 0            ; |alu                                                      ; alu         ; work         ;
;    |alu_1bit:alus[10].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[10].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[10].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[10].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[10].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[10].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[11].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[11].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[11].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[11].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[11].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[11].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[12].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[12].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[12].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[12].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[12].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[12].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[13].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[13].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[13].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[13].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[13].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[13].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[14].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[14].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 4 (4)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[14].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[14].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[14].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[15].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[15].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[15].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[15].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[15].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[15].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[16].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[16].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[16].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[16].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[16].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[16].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[17].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[17].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[17].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[17].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[17].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[17].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[18].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[18].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[18].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[18].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[18].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[19].slice| ; 6 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[19].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 5 (5)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[19].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[19].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[19].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[1].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[1].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[1].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[1].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[1].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[20].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[20].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[20].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[20].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[20].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[20].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[21].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[21].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[21].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[21].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[21].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[21].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[22].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[22].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[22].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[22].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[22].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[22].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[23].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[23].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[23].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[23].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[23].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[23].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[24].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[24].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 4 (4)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[24].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[24].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[24].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[25].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[25].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[25].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[25].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[25].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[25].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[26].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[26].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[26].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[26].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[26].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[26].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[27].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[27].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[27].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[27].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[27].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[27].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[28].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[28].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[28].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[28].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[28].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[29].slice| ; 6 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[29].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 5 (5)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[29].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[29].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[29].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[2].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[2].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[2].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[2].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[2].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[2].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[30].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[30].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[30].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[30].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[30].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[30].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[31].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[31].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[31].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[31].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[31].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[31].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[32].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[32].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[32].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[32].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[32].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[32].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[33].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[33].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[33].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[33].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[33].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[33].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[34].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[34].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 4 (4)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[34].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[34].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[34].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[35].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[35].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[35].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[35].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[35].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[35].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[36].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[36].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[36].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[36].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[36].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[36].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[37].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[37].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[37].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[37].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[37].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[37].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[38].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[38].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[38].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[38].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[38].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[39].slice| ; 6 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[39].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 4 (4)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[39].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[39].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[39].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[3].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[3].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[3].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[3].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[3].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[3].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[40].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[40].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[40].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[40].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[40].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[40].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[41].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[41].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[41].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[41].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[41].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[41].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[42].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[42].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[42].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[42].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[42].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[43].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[43].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[43].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[43].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[43].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[43].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[44].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[44].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 3 (3)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[44].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[44].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[44].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[44].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[45].slice| ; 4 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[45].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[45].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[45].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[45].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[45].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[46].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[46].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[46].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[46].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[46].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[46].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[47].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[47].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[47].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[47].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[47].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[48].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[48].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[48].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[48].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[48].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[48].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[49].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[49].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 3 (3)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[49].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[49].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[49].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[49].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[4].slice|  ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[4].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 4 (4)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[4].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[4].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[4].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[50].slice| ; 4 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[50].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[50].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[50].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[50].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[50].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[51].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[51].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[51].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[51].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[51].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[51].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[52].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[52].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[52].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[52].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[52].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[53].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[53].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[53].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[53].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[53].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[53].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[54].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[54].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 3 (3)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[54].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[54].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[54].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[54].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[55].slice| ; 4 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[55].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[55].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[55].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[55].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[55].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[56].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[56].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[56].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[56].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[56].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[56].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[57].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[57].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[57].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[57].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[57].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[58].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[58].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[58].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[58].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[58].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[58].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[59].slice| ; 5 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[59].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 3 (3)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[59].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[59].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[59].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[59].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[5].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[5].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[5].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[5].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[5].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[5].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[60].slice| ; 4 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[60].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[60].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[60].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[60].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[60].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[61].slice| ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[61].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[61].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[61].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[61].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[61].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[62].slice| ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[62].slice                              ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[62].slice|mux2to1:invertB              ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[62].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[62].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[63].slice| ; 4 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[63].slice                              ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[63].slice|adder:fullAdder              ; adder       ; work         ;
;       |mux8to1:control|      ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[63].slice|mux8to1:control              ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 2 (2)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[63].slice|mux8to1:control|mux2to1:mux2 ; mux2to1     ; work         ;
;    |alu_1bit:alus[6].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[6].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[6].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[6].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[6].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[6].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[7].slice|  ; 3 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[7].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[7].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[7].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[7].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[7].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[8].slice|  ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[8].slice                               ; alu_1bit    ; work         ;
;       |mux2to1:invertB|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[8].slice|mux2to1:invertB               ; mux2to1     ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[8].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[8].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:alus[9].slice|  ; 6 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[9].slice                               ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 5 (5)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[9].slice|adder:fullAdder               ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[9].slice|mux8to1:control               ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:alus[9].slice|mux8to1:control|mux2to1:mux2  ; mux2to1     ; work         ;
;    |alu_1bit:first|          ; 2 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:first                                       ; alu_1bit    ; work         ;
;       |adder:fullAdder|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:first|adder:fullAdder                       ; adder       ; work         ;
;       |mux8to1:control|      ; 1 (0)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:first|mux8to1:control                       ; mux8to1     ; work         ;
;          |mux2to1:mux2|      ; 1 (1)               ; 0 (0)                     ; 0                 ; 0          ; 0    ; 0            ; |alu|alu_1bit:first|mux8to1:control|mux2to1:mux2          ; mux2to1     ; work         ;
+------------------------------+---------------------+---------------------------+-------------------+------------+------+--------------+-----------------------------------------------------------+-------------+--------------+
Note: For table entries with two numbers listed, the numbers in parentheses indicate the number of resources of the given type used by the specific entity alone. The numbers listed outside of parentheses indicate the total resources of the given type used by the specific entity and all of its sub-entities in the hierarchy.


+------------------------------------------------------+
; General Register Statistics                          ;
+----------------------------------------------+-------+
; Statistic                                    ; Value ;
+----------------------------------------------+-------+
; Total registers                              ; 0     ;
; Number of registers using Synchronous Clear  ; 0     ;
; Number of registers using Synchronous Load   ; 0     ;
; Number of registers using Asynchronous Clear ; 0     ;
; Number of registers using Asynchronous Load  ; 0     ;
; Number of registers using Clock Enable       ; 0     ;
; Number of registers using Preset             ; 0     ;
+----------------------------------------------+-------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Multiplexer Restructuring Statistics (Restructuring Performed)                                                                                                     ;
+--------------------+-----------+---------------+----------------------+------------------------+------------+------------------------------------------------------+
; Multiplexer Inputs ; Bus Width ; Baseline Area ; Area if Restructured ; Saving if Restructured ; Registered ; Example Multiplexer Output                           ;
+--------------------+-----------+---------------+----------------------+------------------------+------------+------------------------------------------------------+
; 5:1                ; 64 bits   ; 192 LEs       ; 192 LEs              ; 0 LEs                  ; No         ; |alu|alu_1bit:first|mux8to1:control|mux2to1:mux2|or1 ;
+--------------------+-----------+---------------+----------------------+------------------------+------------+------------------------------------------------------+


+-----------------------------------------------------+
; Post-Synthesis Netlist Statistics for Top Partition ;
+-----------------------+-----------------------------+
; Type                  ; Count                       ;
+-----------------------+-----------------------------+
; arriav_lcell_comb     ; 242                         ;
;     normal            ; 242                         ;
;         2 data inputs ; 74                          ;
;         3 data inputs ; 37                          ;
;         4 data inputs ; 17                          ;
;         5 data inputs ; 25                          ;
;         6 data inputs ; 89                          ;
; boundary_port         ; 199                         ;
;                       ;                             ;
; Max LUT depth         ; 27.00                       ;
; Average LUT depth     ; 18.62                       ;
+-----------------------+-----------------------------+


+-------------------------------+
; Elapsed Time Per Partition    ;
+----------------+--------------+
; Partition Name ; Elapsed Time ;
+----------------+--------------+
; Top            ; 00:00:02     ;
+----------------+--------------+


+-------------------------------+
; Analysis & Synthesis Messages ;
+-------------------------------+
Info: *******************************************************************
Info: Running Quartus Prime Analysis & Synthesis
    Info: Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition
    Info: Processing started: Fri Jul 05 13:35:14 2024
Info: Command: quartus_map --read_settings_files=on --write_settings_files=off DE1_SoC -c DE1_SoC
Info (20030): Parallel compilation is enabled and will use 4 of the 4 processors detected
Info (12021): Found 1 design units, including 1 entities, in source file alu.sv
    Info (12023): Found entity 1: alu File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu.sv Line: 3
Info (12021): Found 3 design units, including 3 entities, in source file logic.sv
    Info (12023): Found entity 1: bitAND File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/logic.sv Line: 3
    Info (12023): Found entity 2: bitOR File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/logic.sv Line: 16
    Info (12023): Found entity 3: bitXOR File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/logic.sv Line: 29
Info (12021): Found 1 design units, including 1 entities, in source file alustim.sv
    Info (12023): Found entity 1: alustim File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alustim.sv Line: 20
Info (12021): Found 1 design units, including 1 entities, in source file adding.sv
    Info (12023): Found entity 1: adder File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/adding.sv Line: 3
Info (12021): Found 2 design units, including 2 entities, in source file alu_1bit.sv
    Info (12023): Found entity 1: alu_1bit File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv Line: 3
    Info (12023): Found entity 2: alu_1bit_tb File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv Line: 38
Info (12021): Found 3 design units, including 3 entities, in source file muxes.sv
    Info (12023): Found entity 1: mux2to1 File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/muxes.sv Line: 3
    Info (12023): Found entity 2: mux4to1 File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/muxes.sv Line: 18
    Info (12023): Found entity 3: mux8to1 File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/muxes.sv Line: 30
Info (12127): Elaborating entity "alu" for the top level hierarchy
Info (12128): Elaborating entity "alu_1bit" for hierarchy "alu_1bit:first" File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu.sv Line: 28
Info (12128): Elaborating entity "mux2to1" for hierarchy "alu_1bit:first|mux2to1:invertB" File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv Line: 20
Info (12128): Elaborating entity "adder" for hierarchy "alu_1bit:first|adder:fullAdder" File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv Line: 21
Info (12128): Elaborating entity "mux8to1" for hierarchy "alu_1bit:first|mux8to1:control" File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/alu_1bit.sv Line: 33
Info (12128): Elaborating entity "mux4to1" for hierarchy "alu_1bit:first|mux8to1:control|mux4to1:mux0" File: C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/muxes.sv Line: 37
Info (286030): Timing-Driven Synthesis is running
Info (144001): Generated suppressed messages file C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/output_files/DE1_SoC.map.smsg
Info (16010): Generating hard_block partition "hard_block:auto_generated_inst"
    Info (16011): Adding 0 node(s), including 0 DDIO, 0 PLL, 0 transceiver and 0 LCELL
Info (21057): Implemented 441 device resources after synthesis - the final resource count might be different
    Info (21058): Implemented 131 input pins
    Info (21059): Implemented 68 output pins
    Info (21061): Implemented 242 logic cells
Info: Quartus Prime Analysis & Synthesis was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 4824 megabytes
    Info: Processing ended: Fri Jul 05 13:35:35 2024
    Info: Elapsed time: 00:00:21
    Info: Total CPU time (on all processors): 00:00:12


+------------------------------------------+
; Analysis & Synthesis Suppressed Messages ;
+------------------------------------------+
The suppressed messages can be found in C:/Users/aidan/OneDrive/Documents/UW-aidan-studio2/Notes/2023-2024/Summer/EE469/Lab2/output_files/DE1_SoC.map.smsg.


